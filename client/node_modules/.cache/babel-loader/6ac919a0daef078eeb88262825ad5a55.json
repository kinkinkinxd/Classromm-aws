{"ast":null,"code":"var _jsxFileName = \"/Users/kin/Development/Classroom-Microservice/client/src/components/Posts/Posts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport qs from 'qs';\nimport styles from './Posts.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Posts = () => {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [postTitle, setPostTitle] = useState(\"\");\n  const [comments, setComments] = useState({});\n  const location = useLocation();\n  const params = qs.parse(location.search.substring(1));\n  const classId = params.classId;\n\n  const createPost = async e => {\n    e.preventDefault();\n    const res = await axios.post('http://localhost:4002/create_post', {\n      classId,\n      postTitle\n    });\n    setPosts(res.data);\n    setPostTitle(\"\");\n    Object.values(res.data).map(post => {\n      comments[post.id] = \"\";\n    });\n  };\n\n  const commentHandler = (e, postId) => {\n    setComments({ ...comments,\n      [postId]: e.target.value\n    });\n  };\n\n  const createComment = async (e, postId) => {\n    e.preventDefault();\n    setComments(comments); // make add_comment axios request here\n\n    await axios.post('http://localhost:4002/add_comment', {\n      id: postId,\n      class: classId,\n      text: comments[postId]\n    });\n  };\n\n  const renderComments = commentArr => {\n    var allComments = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 23\n    }, this);\n\n    allComments = Object.values(commentArr).map(text => {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.commentTitle,\n        children: [\"C: \", text]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this);\n    });\n    return allComments;\n  };\n\n  var renderedPosts = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 24\n  }, this);\n\n  if (Object.keys(posts).length > 0) {\n    renderedPosts = Object.values(posts).map(post => {\n      console.log('rendering posts.');\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        className: styles.singlePost,\n        onSubmit: e => createComment(e, post.id),\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.postTitle,\n          children: [\"Q: \", post.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), renderComments(post.comments), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: post.id,\n          className: styles.commentText,\n          value: comments[post.id] || \"\",\n          type: \"text\",\n          onChange: e => commentHandler(e, post.id),\n          required: true,\n          placeholder: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.commentBtn,\n          children: \"COMMENT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 10\n      }, this);\n    });\n  }\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const res = await axios.get('http://localhost:4002/get_posts/' + classId);\n      setPosts(res.data);\n    };\n\n    fetchPosts();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.centerPosts,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.colorBox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: styles.classTitle,\n      children: params.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: createPost,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.postText,\n        value: postTitle,\n        type: \"text\",\n        onChange: e => setPostTitle(e.target.value),\n        required: true,\n        placeholder: \"Make a post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.postBtn,\n        children: \"POST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.allPosts,\n      children: renderedPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Posts, \"8vL4h+HXCCEsQC/YqDLhQwvkrN0=\", false, function () {\n  return [useLocation];\n});\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/kin/Development/Classroom-Microservice/client/src/components/Posts/Posts.js"],"names":["React","useEffect","useState","useLocation","axios","qs","styles","Posts","posts","setPosts","postTitle","setPostTitle","comments","setComments","location","params","parse","search","substring","classId","createPost","e","preventDefault","res","post","data","Object","values","map","id","commentHandler","postId","target","value","createComment","class","text","renderComments","commentArr","allComments","commentTitle","renderedPosts","keys","length","console","log","singlePost","title","commentText","commentBtn","fetchPosts","get","centerPosts","colorBox","classTitle","postText","postBtn","allPosts"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport qs from 'qs';\n\nimport styles from './Posts.module.css';\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [postTitle, setPostTitle] = useState(\"\");\n  const [comments, setComments] = useState({});\n  const location = useLocation();\n  const params = qs.parse(location.search.substring(1));\n  const classId = params.classId;\n\n  const createPost = async (e) => {\n    e.preventDefault();\n    const res = await axios.post('http://localhost:4002/create_post', { classId, postTitle });\n    setPosts(res.data);\n    setPostTitle(\"\");\n\n    Object.values(res.data).map(post => {\n      comments[post.id] = \"\";\n    });\n  }\n\n  const commentHandler = (e, postId) => {\n    setComments({...comments, [postId]:e.target.value});\n  }\n\n  const createComment = async (e, postId) => {\n    e.preventDefault();\n    setComments(comments);\n\n    // make add_comment axios request here\n    await axios.post('http://localhost:4002/add_comment', {\n      id: postId,\n      class: classId,\n      text: comments[postId]\n    });\n  }\n\n  const renderComments = (commentArr) => {\n\n    var allComments = <div></div>;\n    allComments = Object.values(commentArr).map(text => {\n      return (\n        <p className={styles.commentTitle}>C: {text}</p>\n      )\n    })\n\n    return allComments\n  }\n\n   var renderedPosts = <div></div>;\n   if (Object.keys(posts).length > 0) {\n     renderedPosts = Object.values(posts).map(post => {\n       console.log('rendering posts.');\n       return (\n         <form key={post.id} className={styles.singlePost} onSubmit={e => createComment(e, post.id)}>\n            <p className={styles.postTitle}>\n              Q: {post.title}\n            </p>\n            {renderComments(post.comments)}\n            <input\n              name={post.id}\n              className={styles.commentText}\n              value={comments[post.id] || \"\"}\n              type=\"text\"\n              onChange={e => commentHandler(e, post.id)}\n              required\n              placeholder=\"Comment\"\n            />\n            <button className={styles.commentBtn}>COMMENT</button>\n\n          </form>\n       );\n     });\n   }\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const res = await axios.get('http://localhost:4002/get_posts/' + classId);\n      setPosts(res.data);\n    };\n    \n    fetchPosts();\n  }, []);\n\n  return (\n    <div className={styles.centerPosts}>\n    <div className={styles.colorBox}></div>\n    <h2 className={styles.classTitle}>{params.title}</h2>\n\n      <form onSubmit={createPost}>\n        <input\n          className={styles.postText}\n          value={postTitle}\n          type=\"text\"\n          onChange={e => setPostTitle(e.target.value)}\n          required\n          placeholder=\"Make a post\"\n        />\n        <button className={styles.postBtn}>POST</button>\n      </form>\n      <div className={styles.allPosts}>\n        {renderedPosts}\n      </div>\n    </div>\n  );\n}\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}